{
"version":3,
"file":"module$node_modules$golden_layout$dist$cjs$ts$controls$browser_popout.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/golden-layout/dist/cjs/ts/controls/browser-popout.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$golden_layout$dist$cjs$ts$controls$browser_popout\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserPopout = void 0;\nconst resolved_config_1 = require(\"../config/resolved-config\");\nconst external_error_1 = require(\"../errors/external-error\");\nconst internal_error_1 = require(\"../errors/internal-error\");\nconst event_emitter_1 = require(\"../utils/event-emitter\");\nconst utils_1 = require(\"../utils/utils\");\n/**\n * Pops a content item out into a new browser window.\n * This is achieved by\n *\n *    - Creating a new configuration with the content item as root element\n *    - Serializing and minifying the configuration\n *    - Opening the current window's URL with the configuration as a GET parameter\n *    - GoldenLayout when opened in the new window will look for the GET parameter\n *      and use it instead of the provided configuration\n * @public\n */\nclass BrowserPopout extends event_emitter_1.EventEmitter {\n    /**\n     * @param _config - GoldenLayout item config\n     * @param _initialWindowSize - A map with width, height, top and left\n     * @internal\n     */\n    constructor(\n    /** @internal */\n    _config, \n    /** @internal */\n    _initialWindowSize, \n    /** @internal */\n    _layoutManager) {\n        super();\n        this._config = _config;\n        this._initialWindowSize = _initialWindowSize;\n        this._layoutManager = _layoutManager;\n        this._isInitialised = false;\n        this._popoutWindow = null;\n        this.createWindow();\n    }\n    toConfig() {\n        var _a, _b;\n        if (this._isInitialised === false) {\n            throw new Error('Can\\'t create config, layout not yet initialised');\n        }\n        const glInstance = this.getGlInstance();\n        const glInstanceConfig = glInstance.saveLayout();\n        let left;\n        let top;\n        if (this._popoutWindow === null) {\n            left = null;\n            top = null;\n        }\n        else {\n            left = (_a = this._popoutWindow.screenX) !== null && _a !== void 0 ? _a : this._popoutWindow.screenLeft;\n            top = (_b = this._popoutWindow.screenY) !== null && _b !== void 0 ? _b : this._popoutWindow.screenTop;\n        }\n        const window = {\n            width: this.getGlInstance().width,\n            height: this.getGlInstance().height,\n            left,\n            top,\n        };\n        const config = {\n            root: glInstanceConfig.root,\n            openPopouts: glInstanceConfig.openPopouts,\n            settings: glInstanceConfig.settings,\n            dimensions: glInstanceConfig.dimensions,\n            header: glInstanceConfig.header,\n            window,\n            parentId: this._config.parentId,\n            indexInParent: this._config.indexInParent,\n            resolved: true,\n        };\n        return config;\n    }\n    getGlInstance() {\n        if (this._popoutWindow === null) {\n            throw new internal_error_1.UnexpectedNullError('BPGGI24693');\n        }\n        return this._popoutWindow.__glInstance;\n    }\n    /** @internal */\n    getWindow() {\n        if (this._popoutWindow === null) {\n            throw new internal_error_1.UnexpectedNullError('BPGW087215');\n        }\n        return this._popoutWindow;\n    }\n    close() {\n        if (this.getGlInstance()) {\n            this.getGlInstance().closeWindow();\n        }\n        else {\n            try {\n                this.getWindow().close();\n            }\n            catch (e) {\n                //\n            }\n        }\n    }\n    /**\n     * Returns the popped out item to its original position. If the original\n     * parent isn't available anymore it falls back to the layout's topmost element\n     */\n    popIn() {\n        let parentItem;\n        let index = this._config.indexInParent;\n        if (!this._config.parentId) {\n            return;\n        }\n        /*\n        * The deepExtend call seems a bit pointless, but it's crucial to\n        * copy the config returned by this.getGlInstance().toConfig()\n        * onto a new object. Internet Explorer keeps the references\n        * to objects on the child window, resulting in the following error\n        * once the child window is closed:\n        *\n        * The callee (server [not server application]) is not available and disappeared\n        */\n        const glInstanceLayoutConfig = this.getGlInstance().saveLayout();\n        const copiedGlInstanceLayoutConfig = utils_1.deepExtend({}, glInstanceLayoutConfig);\n        const copiedRoot = copiedGlInstanceLayoutConfig.root;\n        if (copiedRoot === undefined) {\n            throw new internal_error_1.UnexpectedUndefinedError('BPPIR19998');\n        }\n        const groundItem = this._layoutManager.groundItem;\n        if (groundItem === undefined) {\n            throw new internal_error_1.UnexpectedUndefinedError('BPPIG34972');\n        }\n        parentItem = groundItem.getItemsByPopInParentId(this._config.parentId)[0];\n        /*\n        * Fallback if parentItem is not available. Either add it to the topmost\n        * item or make it the topmost item if the layout is empty\n        */\n        if (!parentItem) {\n            if (groundItem.contentItems.length > 0) {\n                parentItem = groundItem.contentItems[0];\n            }\n            else {\n                parentItem = groundItem;\n            }\n            index = 0;\n        }\n        const newContentItem = this._layoutManager.createAndInitContentItem(copiedRoot, parentItem);\n        parentItem.addChild(newContentItem, index);\n        if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n            this._onClose();\n        }\n        else {\n            this.close();\n        }\n    }\n    /**\n     * Creates the URL and window parameter\n     * and opens a new window\n     * @internal\n     */\n    createWindow() {\n        const url = this.createUrl();\n        /**\n         * Bogus title to prevent re-usage of existing window with the\n         * same title. The actual title will be set by the new window's\n         * GoldenLayout instance if it detects that it is in subWindowMode\n         */\n        const target = Math.floor(Math.random() * 1000000).toString(36);\n        /**\n         * The options as used in the window.open string\n         */\n        const features = this.serializeWindowFeatures({\n            width: this._initialWindowSize.width,\n            height: this._initialWindowSize.height,\n            innerWidth: this._initialWindowSize.width,\n            innerHeight: this._initialWindowSize.height,\n            menubar: 'no',\n            toolbar: 'no',\n            location: 'no',\n            personalbar: 'no',\n            resizable: 'yes',\n            scrollbars: 'no',\n            status: 'no'\n        });\n        this._popoutWindow = globalThis.open(url, target, features);\n        if (!this._popoutWindow) {\n            if (this._layoutManager.layoutConfig.settings.blockedPopoutsThrowError === true) {\n                const error = new external_error_1.PopoutBlockedError('Popout blocked');\n                throw error;\n            }\n            else {\n                return;\n            }\n        }\n        this._popoutWindow.addEventListener('load', () => this.positionWindow(), { passive: true });\n        this._popoutWindow.addEventListener('beforeunload', () => {\n            if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n                this.popIn();\n            }\n            else {\n                this._onClose();\n            }\n        }, { passive: true });\n        /**\n         * Polling the childwindow to find out if GoldenLayout has been initialised\n         * doesn't seem optimal, but the alternatives - adding a callback to the parent\n         * window or raising an event on the window object - both would introduce knowledge\n         * about the parent to the child window which we'd rather avoid\n         */\n        this._checkReadyInterval = setInterval(() => this.checkReady(), 10);\n    }\n    /** @internal */\n    checkReady() {\n        if (this._popoutWindow === null) {\n            throw new internal_error_1.UnexpectedNullError('BPCR01844');\n        }\n        else {\n            if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {\n                this.onInitialised();\n                if (this._checkReadyInterval !== undefined) {\n                    clearInterval(this._checkReadyInterval);\n                    this._checkReadyInterval = undefined;\n                }\n            }\n        }\n    }\n    /**\n     * Serialises a map of key:values to a window options string\n     *\n     * @param windowOptions -\n     *\n     * @returns serialised window options\n     * @internal\n     */\n    serializeWindowFeatures(windowOptions) {\n        const windowOptionsString = [];\n        for (const key in windowOptions) {\n            windowOptionsString.push(key + '=' + windowOptions[key].toString());\n        }\n        return windowOptionsString.join(',');\n    }\n    /**\n     * Creates the URL for the new window, including the\n     * config GET parameter\n     *\n     * @returns URL\n     * @internal\n     */\n    createUrl() {\n        const storageKey = 'gl-window-config-' + utils_1.getUniqueId();\n        const config = resolved_config_1.ResolvedLayoutConfig.minifyConfig(this._config);\n        try {\n            localStorage.setItem(storageKey, JSON.stringify(config));\n        }\n        catch (e) {\n            throw new Error('Error while writing to localStorage ' + e.toString());\n        }\n        const urlParts = document.location.href.split('?');\n        // URL doesn't contain GET-parameters\n        if (urlParts.length === 1) {\n            return urlParts[0] + '?gl-window=' + storageKey;\n            // URL contains GET-parameters\n        }\n        else {\n            return document.location.href + '&gl-window=' + storageKey;\n        }\n    }\n    /**\n     * Move the newly created window roughly to\n     * where the component used to be.\n     * @internal\n     */\n    positionWindow() {\n        if (this._popoutWindow === null) {\n            throw new Error('BrowserPopout.positionWindow: null popoutWindow');\n        }\n        else {\n            this._popoutWindow.moveTo(this._initialWindowSize.left, this._initialWindowSize.top);\n            this._popoutWindow.focus();\n        }\n    }\n    /**\n     * Callback when the new window is opened and the GoldenLayout instance\n     * within it is initialised\n     * @internal\n     */\n    onInitialised() {\n        this._isInitialised = true;\n        this.getGlInstance().on('popIn', () => this.popIn());\n        this.emit('initialised');\n    }\n    /**\n     * Invoked 50ms after the window unload event\n     * @internal\n     */\n    _onClose() {\n        setTimeout(() => this.emit('closed'), 50);\n    }\n}\nexports.BrowserPopout = BrowserPopout;\n//# sourceMappingURL=browser-popout.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BrowserPopout","resolved_config_1","external_error_1","internal_error_1","event_emitter_1","utils_1","EventEmitter","_config","_initialWindowSize","_layoutManager","_isInitialised","_popoutWindow","createWindow","_b","Error","glInstanceConfig","getGlInstance","glInstance","saveLayout","left","top","_a","screenX","screenLeft","screenY","screenTop","window","width","height","config","root","openPopouts","settings","dimensions","header","parentId","indexInParent","resolved","UnexpectedNullError","__glInstance","closeWindow","getWindow","close","e","index","glInstanceLayoutConfig","copiedRoot","deepExtend","copiedGlInstanceLayoutConfig","undefined","UnexpectedUndefinedError","groundItem","parentItem","getItemsByPopInParentId","contentItems","length","newContentItem","createAndInitContentItem","addChild","layoutConfig","popInOnClose","_onClose","url","createUrl","target","Math","floor","random","toString","features","serializeWindowFeatures","innerWidth","innerHeight","menubar","toolbar","location","personalbar","resizable","scrollbars","status","globalThis","open","addEventListener","positionWindow","passive","popIn","_checkReadyInterval","setInterval","checkReady","blockedPopoutsThrowError","error","PopoutBlockedError","isInitialised","onInitialised","clearInterval","windowOptions","windowOptionsString","key","push","join","storageKey","getUniqueId","ResolvedLayoutConfig","minifyConfig","localStorage","setItem","JSON","stringify","urlParts","document","href","split","moveTo","focus","on","emit","setTimeout"]
}
