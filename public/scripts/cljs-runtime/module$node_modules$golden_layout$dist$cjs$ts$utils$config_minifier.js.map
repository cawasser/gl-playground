{
"version":3,
"file":"module$node_modules$golden_layout$dist$cjs$ts$utils$config_minifier.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/golden-layout/dist/cjs/ts/utils/config-minifier.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$golden_layout$dist$cjs$ts$utils$config_minifier\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Minifies and unminifies configs by replacing frequent keys\n * and values with one letter substitutes. Config options must\n * retain array position/index, add new options at the end.\n * @internal\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigMinifier = void 0;\nvar ConfigMinifier;\n(function (ConfigMinifier) {\n    const keys = [\n        'settings',\n        'hasHeaders',\n        'constrainDragToContainer',\n        'selectionEnabled',\n        'dimensions',\n        'borderWidth',\n        'minItemHeight',\n        'minItemWidth',\n        'headerHeight',\n        'dragProxyWidth',\n        'dragProxyHeight',\n        'labels',\n        'close',\n        'maximise',\n        'minimise',\n        'popout',\n        'content',\n        'componentType',\n        'componentState',\n        'id',\n        'width',\n        'type',\n        'height',\n        'isClosable',\n        'title',\n        'popoutWholeStack',\n        'openPopouts',\n        'parentId',\n        'activeItemIndex',\n        'reorderEnabled',\n        'borderGrabWidth',\n        //Maximum 36 entries, do not cross this line!\n    ];\n    const values = [\n        true,\n        false,\n        'row',\n        'column',\n        'stack',\n        'component',\n        'close',\n        'maximise',\n        'minimise',\n        'open in new window'\n    ];\n    function checkInitialise() {\n        if (keys.length > 36) {\n            throw new Error('Too many keys in config minifier map');\n        }\n    }\n    ConfigMinifier.checkInitialise = checkInitialise;\n    function translateObject(from, minify) {\n        const to = {};\n        for (const key in from) {\n            if (from.hasOwnProperty(key)) { // In case something has extended Object prototypes\n                let translatedKey;\n                if (minify) {\n                    translatedKey = minifyKey(key);\n                }\n                else {\n                    translatedKey = unminifyKey(key);\n                }\n                const fromValue = from[key];\n                to[translatedKey] = translateValue(fromValue, minify);\n            }\n        }\n        return to;\n    }\n    ConfigMinifier.translateObject = translateObject;\n    function translateArray(from, minify) {\n        const length = from.length;\n        const to = new Array(length);\n        for (let i = 0; i < length; i++) {\n            // In original code, array indices were numbers and not translated\n            const fromValue = from[i];\n            to[i] = translateValue(fromValue, minify);\n        }\n        return to;\n    }\n    function translateValue(from, minify) {\n        if (typeof from === 'object') {\n            if (from === null) {\n                return null;\n            }\n            else {\n                if (Array.isArray(from)) {\n                    return translateArray(from, minify);\n                }\n                else {\n                    return translateObject(from, minify);\n                }\n            }\n        }\n        else {\n            if (minify) {\n                return minifyValue(from);\n            }\n            else {\n                return unminifyValue(from);\n            }\n        }\n    }\n    function minifyKey(value) {\n        /**\n         * If a value actually is a single character, prefix it\n         * with ___ to avoid mistaking it for a minification code\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return '___' + value;\n        }\n        const index = indexOfKey(value);\n        /**\n         * value not found in the dictionary, return it unmodified\n         */\n        if (index === -1) {\n            return value;\n            /**\n             * value found in dictionary, return its base36 counterpart\n             */\n        }\n        else {\n            return index.toString(36);\n        }\n    }\n    function unminifyKey(key) {\n        /**\n         * value is a single character. Assume that it's a translation\n         * and return the original value from the dictionary\n         */\n        if (key.length === 1) {\n            return keys[parseInt(key, 36)];\n        }\n        /**\n         * value originally was a single character and was prefixed with ___\n         * to avoid mistaking it for a translation. Remove the prefix\n         * and return the original character\n         */\n        if (key.substr(0, 3) === '___') {\n            return key[3];\n        }\n        /**\n         * value was not minified\n         */\n        return key;\n    }\n    function minifyValue(value) {\n        /**\n         * If a value actually is a single character, prefix it\n         * with ___ to avoid mistaking it for a minification code\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return '___' + value;\n        }\n        const index = indexOfValue(value);\n        /**\n         * value not found in the dictionary, return it unmodified\n         */\n        if (index === -1) {\n            return value;\n            /**\n             * value found in dictionary, return its base36 counterpart\n             */\n        }\n        else {\n            return index.toString(36);\n        }\n    }\n    function unminifyValue(value) {\n        /**\n         * value is a single character. Assume that it's a translation\n         * and return the original value from the dictionary\n         */\n        if (typeof value === 'string' && value.length === 1) {\n            return values[parseInt(value, 36)];\n        }\n        /**\n         * value originally was a single character and was prefixed with ___\n         * to avoid mistaking it for a translation. Remove the prefix\n         * and return the original character\n         */\n        if (typeof value === 'string' && value.substr(0, 3) === '___') {\n            return value[3];\n        }\n        /**\n         * value was not minified\n         */\n        return value;\n    }\n    function indexOfKey(key) {\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] === key) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function indexOfValue(value) {\n        for (let i = 0; i < values.length; i++) {\n            if (values[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n})(ConfigMinifier = exports.ConfigMinifier || (exports.ConfigMinifier = {}));\n//# sourceMappingURL=config-minifier.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ConfigMinifier","translateObject","from","minify","to","key","hasOwnProperty","length","i","keys","index","toString","parseInt","substr","translatedKey","translateValue","fromValue","Array","isArray","values","checkInitialise","Error"]
}
