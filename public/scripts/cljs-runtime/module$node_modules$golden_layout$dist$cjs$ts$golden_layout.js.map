{
"version":3,
"file":"module$node_modules$golden_layout$dist$cjs$ts$golden_layout.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/golden-layout/dist/cjs/ts/golden-layout.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$golden_layout$dist$cjs$ts$golden_layout\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoldenLayout = void 0;\nconst config_1 = require(\"./config/config\");\nconst resolved_config_1 = require(\"./config/resolved-config\");\nconst layout_manager_1 = require(\"./layout-manager\");\nconst utils_1 = require(\"./utils/utils\");\n/** @public */\nclass GoldenLayout extends layout_manager_1.LayoutManager {\n    /** @internal */\n    constructor(configOrOptionalContainer, container) {\n        super(GoldenLayout.createConfig(configOrOptionalContainer, container));\n        /** @internal */\n        this._subWindowsCreated = false;\n        /** @internal */\n        this._creationTimeoutPassed = false;\n        if (this.isSubWindow) {\n            document.body.style.visibility = 'hidden';\n        }\n        if (this.layoutConfig.root === undefined || this.isSubWindow) {\n            this.init();\n        }\n    }\n    /**\n     * Creates the actual layout. Must be called after all initial components\n     * are registered. Recurses through the configuration and sets up\n     * the item tree.\n     *\n     * If called before the document is ready it adds itself as a listener\n     * to the document.ready event\n     * @deprecated LayoutConfig should not be loaded in {@link (LayoutManager:class)} constructor, but rather in a\n     * {@link (LayoutManager:class).loadLayout} call.  If LayoutConfig is not specified in {@link (LayoutManager:class)} constructor,\n     * then init() will be automatically called internally and should not be called externally.\n     */\n    init() {\n        /**\n         * Create the popout windows straight away. If popouts are blocked\n         * an error is thrown on the same 'thread' rather than a timeout and can\n         * be caught. This also prevents any further initilisation from taking place.\n         */\n        if (this._subWindowsCreated === false) {\n            this.createSubWindows();\n            this._subWindowsCreated = true;\n        }\n        /**\n         * If the document isn't ready yet, wait for it.\n         */\n        if (document.readyState === 'loading' || document.body === null) {\n            document.addEventListener('DOMContentLoaded', () => this.init(), { passive: true });\n            return;\n        }\n        /**\n         * If this is a subwindow, wait a few milliseconds for the original\n         * page's js calls to be executed, then replace the bodies content\n         * with GoldenLayout\n         */\n        if (this.isSubWindow === true && this._creationTimeoutPassed === false) {\n            setTimeout(() => this.init(), 7);\n            this._creationTimeoutPassed = true;\n            return;\n        }\n        if (this.isSubWindow === true) {\n            this.adjustToWindowMode();\n        }\n        super.init();\n    }\n    /**\n     * Creates Subwindows (if there are any). Throws an error\n     * if popouts are blocked.\n     * @internal\n     */\n    createSubWindows() {\n        for (let i = 0; i < this.layoutConfig.openPopouts.length; i++) {\n            const popoutConfig = this.layoutConfig.openPopouts[i];\n            this.createPopoutFromPopoutLayoutConfig(popoutConfig);\n        }\n    }\n    /**\n     * This is executed when GoldenLayout detects that it is run\n     * within a previously opened popout window.\n     * @internal\n     */\n    adjustToWindowMode() {\n        const headElement = document.head;\n        const appendNodeLists = new Array(4);\n        appendNodeLists[0] = document.querySelectorAll('body link');\n        appendNodeLists[1] = document.querySelectorAll('body style');\n        appendNodeLists[2] = document.querySelectorAll('template');\n        appendNodeLists[3] = document.querySelectorAll('.gl_keep');\n        for (let listIdx = 0; listIdx < appendNodeLists.length; listIdx++) {\n            const appendNodeList = appendNodeLists[listIdx];\n            for (let nodeIdx = 0; nodeIdx < appendNodeList.length; nodeIdx++) {\n                const node = appendNodeList[nodeIdx];\n                headElement.appendChild(node);\n            }\n        }\n        const bodyElement = document.body;\n        bodyElement.innerHTML = '';\n        bodyElement.style.visibility = 'visible';\n        if (!this.layoutConfig.settings.popInOnClose) {\n            const popInButtonElement = document.createElement('div');\n            popInButtonElement.classList.add(\"lm_popin\" /* Popin */);\n            popInButtonElement.setAttribute('title', this.layoutConfig.header.dock);\n            const iconElement = document.createElement('div');\n            iconElement.classList.add(\"lm_icon\" /* Icon */);\n            const bgElement = document.createElement('div');\n            bgElement.classList.add(\"lm_bg\" /* Bg */);\n            popInButtonElement.appendChild(iconElement);\n            popInButtonElement.appendChild(bgElement);\n            popInButtonElement.addEventListener('click', () => this.emit('popIn'));\n            bodyElement.appendChild(popInButtonElement);\n        }\n        /*\n        * This seems a bit pointless, but actually causes a reflow/re-evaluation getting around\n        * slickgrid's \"Cannot find stylesheet.\" bug in chrome\n        */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const x = document.body.offsetHeight;\n        /*\n        * Expose this instance on the window object\n        * to allow the opening window to interact with\n        * it\n        */\n        window.__glInstance = this;\n    }\n}\nexports.GoldenLayout = GoldenLayout;\n/** @public */\n(function (GoldenLayout) {\n    /** @internal\n     * Veriable to hold the state whether we already checked if we are running in a sub window.\n     * Fixes popout and creation of nested golden-layouts.\n     */\n    let subWindowChecked = false;\n    /** @internal */\n    function createConfig(configOrOptionalContainer, containerElement) {\n        const windowConfigKey = subWindowChecked ? null : utils_1.getQueryStringParam('gl-window');\n        subWindowChecked = true;\n        const isSubWindow = windowConfigKey !== null;\n        let config;\n        if (windowConfigKey !== null) {\n            const windowConfigStr = localStorage.getItem(windowConfigKey);\n            if (windowConfigStr === null) {\n                throw new Error('Null gl-window Config');\n            }\n            localStorage.removeItem(windowConfigKey);\n            const minifiedWindowConfig = JSON.parse(windowConfigStr);\n            config = resolved_config_1.ResolvedLayoutConfig.unminifyConfig(minifiedWindowConfig);\n        }\n        else {\n            if (configOrOptionalContainer === undefined) {\n                config = undefined;\n            }\n            else {\n                if (configOrOptionalContainer instanceof HTMLElement) {\n                    config = undefined;\n                    containerElement = configOrOptionalContainer;\n                }\n                else {\n                    if (config_1.LayoutConfig.isResolved(configOrOptionalContainer)) {\n                        config = configOrOptionalContainer;\n                    }\n                    else {\n                        config = config_1.LayoutConfig.resolve(configOrOptionalContainer);\n                    }\n                }\n            }\n        }\n        return {\n            layoutConfig: config,\n            isSubWindow,\n            containerElement,\n        };\n    }\n    GoldenLayout.createConfig = createConfig;\n})(GoldenLayout = exports.GoldenLayout || (exports.GoldenLayout = {}));\n//# sourceMappingURL=golden-layout.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","GoldenLayout","config_1","resolved_config_1","layout_manager_1","utils_1","LayoutManager","configOrOptionalContainer","container","createConfig","_creationTimeoutPassed","_subWindowsCreated","isSubWindow","document","body","style","visibility","undefined","layoutConfig","root","init","createSubWindows","readyState","addEventListener","passive","setTimeout","adjustToWindowMode","i","openPopouts","length","createPopoutFromPopoutLayoutConfig","popoutConfig","headElement","head","appendNodeLists","Array","querySelectorAll","listIdx","appendNodeList","nodeIdx","appendChild","node","bodyElement","innerHTML","settings","popInOnClose","popInButtonElement","createElement","classList","add","setAttribute","header","dock","iconElement","bgElement","emit","window","__glInstance","subWindowChecked","containerElement","windowConfigKey","getQueryStringParam","windowConfigStr","localStorage","getItem","Error","removeItem","minifiedWindowConfig","JSON","parse","config","ResolvedLayoutConfig","unminifyConfig","HTMLElement","LayoutConfig","isResolved","resolve"]
}
