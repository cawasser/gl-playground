{
"version":3,
"file":"module$node_modules$flexlayout_react$lib$model$Actions.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/flexlayout-react/lib/model/Actions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$flexlayout_react$lib$model$Actions\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Action_1 = require(\"./Action\");\n/**\n * The Action creator class for FlexLayout model actions\n */\nvar Actions = /** @class */ (function () {\n    function Actions() {\n    }\n    /**\n     * Adds a tab node to the given tabset node\n     * @param json the json for the new tab node e.g {type:\"tab\", component:\"table\"}\n     * @param toNodeId the new tab node will be added to the tabset with this node id\n     * @param location the location where the new tab will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the new tab, overriding autoSelectTab\n     * @returns {{type: (string|string), json: *, toNode: *, location: (*|string), index: *, select?: boolean}}\n     */\n    Actions.addNode = function (json, toNodeId, location, index, select) {\n        return new Action_1.default(Actions.ADD_NODE, {\n            json: json,\n            toNode: toNodeId,\n            location: location.getName(),\n            index: index,\n            select: select,\n        });\n    };\n    /**\n     * Moves a node (tab or tabset) from one location to another\n     * @param fromNodeId the id of the node to move\n     * @param toNodeId the id of the node to receive the moved node\n     * @param location the location where the moved node will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the moved tab(s) in new tabset, overriding autoSelectTab\n     * @returns {{type: (string|string), fromNode: *, toNode: *, location: (*|string), index: *}}\n     */\n    Actions.moveNode = function (fromNodeId, toNodeId, location, index, select) {\n        return new Action_1.default(Actions.MOVE_NODE, {\n            fromNode: fromNodeId,\n            toNode: toNodeId,\n            location: location.getName(),\n            index: index,\n            select: select,\n        });\n    };\n    /**\n     * Deletes a tab node from the layout\n     * @param tabNodeId the id of the node to delete\n     * @returns {{type: (string|string), node: *}}\n     */\n    Actions.deleteTab = function (tabNodeId) {\n        return new Action_1.default(Actions.DELETE_TAB, { node: tabNodeId });\n    };\n    /**\n     * Change the given nodes tab text\n     * @param tabNodeId the id of the node to rename\n     * @param text the test of the tab\n     * @returns {{type: (string|string), node: *, text: *}}\n     */\n    Actions.renameTab = function (tabNodeId, text) {\n        return new Action_1.default(Actions.RENAME_TAB, { node: tabNodeId, text: text });\n    };\n    /**\n     * Selects the given tab in its parent tabset\n     * @param tabNodeId the id of the node to set selected\n     * @returns {{type: (string|string), tabNode: *}}\n     */\n    Actions.selectTab = function (tabNodeId) {\n        return new Action_1.default(Actions.SELECT_TAB, { tabNode: tabNodeId });\n    };\n    /**\n     * Set the given tabset node as the active tabset\n     * @param tabsetNodeId the id of the tabset node to set as active\n     * @returns {{type: (string|string), tabsetNode: *}}\n     */\n    Actions.setActiveTabset = function (tabsetNodeId) {\n        return new Action_1.default(Actions.SET_ACTIVE_TABSET, { tabsetNode: tabsetNodeId });\n    };\n    /**\n     * Adjust the splitter between two tabsets\n     * @example\n     *  Actions.adjustSplit({node1: \"1\", weight1:30, pixelWidth1:300, node2: \"2\", weight2:70, pixelWidth2:700});\n     *\n     * @param splitSpec an object the defines the new split between two tabsets, see example below.\n     * @returns {{type: (string|string), node1: *, weight1: *, pixelWidth1: *, node2: *, weight2: *, pixelWidth2: *}}\n     */\n    Actions.adjustSplit = function (splitSpec) {\n        var node1 = splitSpec.node1Id;\n        var node2 = splitSpec.node2Id;\n        return new Action_1.default(Actions.ADJUST_SPLIT, {\n            node1: node1,\n            weight1: splitSpec.weight1,\n            pixelWidth1: splitSpec.pixelWidth1,\n            node2: node2,\n            weight2: splitSpec.weight2,\n            pixelWidth2: splitSpec.pixelWidth2,\n        });\n    };\n    Actions.adjustBorderSplit = function (nodeId, pos) {\n        return new Action_1.default(Actions.ADJUST_BORDER_SPLIT, { node: nodeId, pos: pos });\n    };\n    /**\n     * Maximizes the given tabset\n     * @param tabsetNodeId the id of the tabset to maximize\n     * @returns {{type: (string|string), node: *}}\n     */\n    Actions.maximizeToggle = function (tabsetNodeId) {\n        return new Action_1.default(Actions.MAXIMIZE_TOGGLE, { node: tabsetNodeId });\n    };\n    /**\n     * Updates the global model jsone attributes\n     * @param attributes the json for the model attributes to update (merge into the existing attributes)\n     * @returns {{type: (string|string), json: *}}\n     */\n    Actions.updateModelAttributes = function (attributes) {\n        return new Action_1.default(Actions.UPDATE_MODEL_ATTRIBUTES, { json: attributes });\n    };\n    /**\n     * Updates the given nodes json attributes\n     * @param nodeId the id of the node to update\n     * @param attributes the json attributes to update (merge with the existing attributes)\n     * @returns {{type: (string|string), node: *, json: *}}\n     */\n    Actions.updateNodeAttributes = function (nodeId, attributes) {\n        return new Action_1.default(Actions.UPDATE_NODE_ATTRIBUTES, { node: nodeId, json: attributes });\n    };\n    Actions.floatTab = function (nodeId) {\n        return new Action_1.default(Actions.FLOAT_TAB, { node: nodeId });\n    };\n    Actions.unFloatTab = function (nodeId) {\n        return new Action_1.default(Actions.UNFLOAT_TAB, { node: nodeId });\n    };\n    Actions.ADD_NODE = \"FlexLayout_AddNode\";\n    Actions.MOVE_NODE = \"FlexLayout_MoveNode\";\n    Actions.DELETE_TAB = \"FlexLayout_DeleteTab\";\n    Actions.RENAME_TAB = \"FlexLayout_RenameTab\";\n    Actions.SELECT_TAB = \"FlexLayout_SelectTab\";\n    Actions.SET_ACTIVE_TABSET = \"FlexLayout_SetActiveTabset\";\n    Actions.ADJUST_SPLIT = \"FlexLayout_AdjustSplit\";\n    Actions.ADJUST_BORDER_SPLIT = \"FlexLayout_AdjustBorderSplit\";\n    Actions.MAXIMIZE_TOGGLE = \"FlexLayout_MaximizeToggle\";\n    Actions.UPDATE_MODEL_ATTRIBUTES = \"FlexLayout_UpdateModelAttributes\";\n    Actions.UPDATE_NODE_ATTRIBUTES = \"FlexLayout_UpdateNodeAttributes\";\n    Actions.FLOAT_TAB = \"FlexLayout_FloatTab\";\n    Actions.UNFLOAT_TAB = \"FlexLayout_UnFloatTab\";\n    return Actions;\n}());\nexports.default = Actions;\n//# sourceMappingURL=Actions.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Action_1","Actions","addNode","Actions.addNode","json","toNodeId","location","index","select","default","ADD_NODE","toNode","getName","moveNode","Actions.moveNode","fromNodeId","MOVE_NODE","fromNode","deleteTab","Actions.deleteTab","tabNodeId","DELETE_TAB","node","renameTab","Actions.renameTab","text","RENAME_TAB","selectTab","Actions.selectTab","SELECT_TAB","tabNode","setActiveTabset","Actions.setActiveTabset","tabsetNodeId","SET_ACTIVE_TABSET","tabsetNode","adjustSplit","Actions.adjustSplit","splitSpec","ADJUST_SPLIT","node1","node1Id","weight1","pixelWidth1","node2","node2Id","weight2","pixelWidth2","adjustBorderSplit","Actions.adjustBorderSplit","nodeId","pos","ADJUST_BORDER_SPLIT","maximizeToggle","Actions.maximizeToggle","MAXIMIZE_TOGGLE","updateModelAttributes","Actions.updateModelAttributes","attributes","UPDATE_MODEL_ATTRIBUTES","updateNodeAttributes","Actions.updateNodeAttributes","UPDATE_NODE_ATTRIBUTES","floatTab","Actions.floatTab","FLOAT_TAB","unFloatTab","Actions.unFloatTab","UNFLOAT_TAB"]
}
