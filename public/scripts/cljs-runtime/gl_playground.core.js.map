{"version":3,"sources":["gl_playground/core.cljs"],"mappings":";;;;;;;;;;AAYA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAuBL,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA6BH;AAA7B,AAAA,AAAA,AAAA;;AACA,AAAMI,AAAU,AAAeJ;AACzBK,AAAU,AAAUL;AACpBM,AAAU,AAAYN;AAF5B,AAGE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA6BC,AAAUC,AAAKC;AAA5C,AAAA,AAAA,AAAA;;AACA,AAACC,AAAa,AAAAC,AAAC,AAACC,AAAcL;AAAhB,AAAA,AAAAI,AAAAA,AAAAA,AAA2BH,AAAAA,AAAKC,AAAAA;;;AAIlD,AAAA,AAAOI;AAAP,AACE,AAAAT,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AADF,AAAA,AAAA,AAAA,AAAA,AAEMQ,AAAiB,AAAWC,AAAM,AAACC,AAAQf,AAC1BC;;AAIvB;;;AAAA,AAA6Be;AAA7B,AAIE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAAA,AAAA,AAACK,AAAiB,AAAA,AAAiBC;;AAIrC,AAAA,AAAMC;AAAN,AACE,AAAAhB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AACA,AAACW;;AAIH","names":["gl-playground.core/layout","gl-playground.core/component-factory","node","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","component","name","config","reagent.core.as_element","fexpr__31511","gl-playground.widget.registry/widget-for","gl-playground.core/flex","js/module$node_modules$flexlayout_react$lib$index.Layout","js/module$node_modules$flexlayout_react$lib$index.Model","cljs.core/clj->js","gl-playground.core/mount-components","reagent.dom.render","js/document","gl-playground.core/main"],"sourcesContent":["(ns gl-playground.core\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rd]\n    [cljs.tools.reader.edn :as edn]\n    [taoensso.timbre :as t]\n    [\"flexlayout-react\" :refer (Layout Model) :default FlexLayout]\n    [gl-playground.widget.registry :as wr]\n    [gl-playground.widget.just-a-button]\n    [gl-playground.widget.simple-form]))\n\n\n(def layout\n  {:global {}\n   :layout {:type     :row\n            :weight   100\n            :children [\n                       {:type     :tabset\n                        :weight   50\n                        :selected 0\n                        :children [{:type      :tab\n                                    :name      \"A Button\"\n                                    :component \"button\"\n                                    :config    {:label \"Submit!\"}}]}\n                       {:type     :tabset\n                        :weight   50\n                        :selected 0\n                        :children [{:type      :tab\n                                    :name      \"Simple Form\"\n                                    :component \"form\"\n                                    :config    {:text \"some text\"}}]}]}})\n\n\n\n\n(defn component-factory [node]\n  (t/info \"component-factory \" node)\n  (let [component (.getComponent node)\n        name      (.getName node)\n        config    (.getConfig node)]\n    (t/info \"component-factory \" component name config)\n    (r/as-element ((wr/widget-for component) name config))))\n\n\n\n(defn- flex []\n  (t/info \"flex\")\n  [:> Layout {:model   (.fromJson Model (clj->js layout))\n              :factory component-factory}])\n\n\n\n(defn ^:dev/after-load-async mount-components\n  \"mount the main UI components using Reagent\"\n  []\n\n  (rd/render #'flex (.getElementById js/document \"app\")))\n\n\n\n(defn main []\n  (t/info \"running!\")\n  (mount-components))\n\n\n\n(comment\n  [:> FlexLayout]\n\n  [:> FlexLayout {:model   {}\n                  :factory component-factory}]\n\n  [:p \"testing\"]\n\n  (def model (.fromJson Model (clj->js layout)))\n\n\n  (r/reactify-component\n    [:button name])\n\n  (wr/widget-for \"form\")\n\n  (clj->js {:text \"some text\"})\n  (pr-str {:text \"some text\"})\n  (-> {:text \"some text\"}\n    pr-str\n    edn/read-string)\n  (js->clj {\"text\" \"some text\"})\n\n  ())\n\n\n"]}